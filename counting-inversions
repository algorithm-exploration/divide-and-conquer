#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

class InversionContainer {
    public:
        vector<int> arr;
        long int inversion_count;
        InversionContainer(vector<int> v) : arr(v), inversion_count(0) {}
};

InversionContainer merge_count_inversions(InversionContainer& left, InversionContainer& right, InversionContainer &icon) {
    icon.inversion_count = 0;
    icon.arr = vector<int>();
    vector<int>::iterator left_ptr=left.arr.begin(), right_ptr=right.arr.begin();
    while((left_ptr != left.arr.end()) && (right_ptr != right.arr.end())) {
        if(*left_ptr > *right_ptr) {
            icon.inversion_count += left.arr.end() - left_ptr;
            icon.arr.push_back(*right_ptr);
            right_ptr++;
        } else {
            icon.arr.push_back(*left_ptr);
            left_ptr++;
        }
    } if(left_ptr == left.arr.end()) icon.arr.insert(icon.arr.end(), right_ptr, right.arr.end());
    else icon.arr.insert(icon.arr.end(), left_ptr, left.arr.end());
    return icon;
}

void sort_count_inversions(InversionContainer &icon) {
    if(icon.arr.size() > 1) {
        InversionContainer left_side_icon = InversionContainer(vector<int>(icon.arr.begin(), icon.arr.begin() + icon.arr.size()/2));
        InversionContainer right_side_icon = InversionContainer(vector<int>(icon.arr.begin() + icon.arr.size()/2, icon.arr.end()));
        sort_count_inversions(left_side_icon);
        sort_count_inversions(right_side_icon);
        merge_count_inversions(left_side_icon, right_side_icon, icon);
        icon.inversion_count += left_side_icon.inversion_count + right_side_icon.inversion_count;
    }
}

// Complete the countInversions function below.
long countInversions(vector<int> arr) {
   InversionContainer icon = InversionContainer(arr);
   sort_count_inversions(icon);
//    cout << "array: \n";
//    for(int item: icon.arr) {
//        cout << item << endl;
//    } cout << "end array...\n";
   return icon.inversion_count;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int t;
    cin >> t;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int t_itr = 0; t_itr < t; t_itr++) {
        int n;
        cin >> n;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        string arr_temp_temp;
        getline(cin, arr_temp_temp);

        vector<string> arr_temp = split_string(arr_temp_temp);

        vector<int> arr(n);

        for (int i = 0; i < n; i++) {
            int arr_item = stoi(arr_temp[i]);

            arr[i] = arr_item;
        }

        long result = countInversions(arr);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
